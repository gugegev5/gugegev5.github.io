#define GLSLIFY 1
#define SHADER_NAME PROJECT-IMG
// #pragma glslify: snoise2 = require(glsl-noise/simplex/2d)

uniform float uOpacity;
uniform float uTime;
// uniform float uProgress;
// uniform float uZoom;
// uniform float uShift;
// uniform vec3 uColor;
// uniform float uMixBoost;
// uniform float uScrollDistortion;
// uniform vec2 uSpeed;
// uniform vec2 uMixRange;
varying vec2 vUv;
uniform sampler2D uMap;


// float fbm (in vec2 _st) {
//   float v = 0.0;
//   float a = 0.5;
//   vec2 shift = vec2(uShift);
//   // Rotate to reduce axial bias
//   mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
//     v += a * snoise2(_st);
//     _st = rot * _st * 2.0 + shift;
//     a *= 0.5;
//   return v;
// }

void main() {

  // vec2 st = (vUv * .1) * uZoom;
  // vec3 color = vec3(0.0);

  // vec2 r = vec2(0.);
  // r.x = fbm(st + 1.0 + vec2(1.7,9.2)+ 0.15 * uTime * .0001 * uSpeed.x);
  // r.y = fbm(st + 1.0 + vec2(8.3,2.8)+ 0.126 * uTime * .0001 * uSpeed.y);

  // float f = fbm(st + r );

  // color = mix(vec3(uMixRange.x), vec3(uMixRange.y), clamp( ( f * f ) * uMixBoost, 0.0, 1.0));

  // // invert
  // color = 1. - color;

  // color = f * color;

  // float d = color.r * uScrollDistortion;
  vec4 texel = texture2D(uMap, vec2(vUv.x, vUv.y)); // +d on y
  gl_FragColor = vec4(texel.rgb, texel.a * uOpacity);
}